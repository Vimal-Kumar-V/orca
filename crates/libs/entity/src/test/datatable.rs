//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "data_table")]
pub struct Model {
    #[serde(skip_deserializing)]
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[serde(skip_deserializing)]
    pub table_name: String,
    pub description: Option<String>,
    #[serde(skip_deserializing)]
    pub app_id: Uuid,

    #[sea_orm(ignore)]
    pub fields: Option<Vec<super::field::Model>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    // #[sea_orm(has_many = "super::action::Entity")]
    // Action,
    #[sea_orm(
        belongs_to = "crate::app::app::Entity",
        from = "Column::AppId",
        to = "crate::app::app::Column::Id"
    )]
    App,
    #[sea_orm(has_many = "super::field::Entity")]
    Field,
}

impl Related<crate::app::app::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::App.def()
    }
}

// `Related` trait has to be implemented by hand
impl Related<super::field::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Field.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
