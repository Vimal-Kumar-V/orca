//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(Some(10))",
    enum_name = "execution_type"
)]
pub enum ExecutionType {
    #[sea_orm(string_value = "TestCase")]
    #[serde(rename = "TestCase")]
    TestCase,
    #[sea_orm(string_value = "TestSuite")]
    #[serde(rename = "TestSuite")]
    TestSuite,
}

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(Some(10))",
    enum_name = "execution_kind"
)]
pub enum ExecutionKind {
    #[sea_orm(string_value = "Scheduled")]
    #[serde(rename = "Scheduled")]
    Scheduled,
    #[sea_orm(string_value = "Trigger")]
    #[serde(rename = "Trigger")]
    Trigger,
}


#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(
rs_type = "String",
db_type = "String(Some(10))",
enum_name = "execution_status"
)]
pub enum ExecutionStatus {
    #[sea_orm(string_value = "Started")]
    #[serde(rename = "Started")]
    Started,
    #[sea_orm(string_value = "Running")]
    #[serde(rename = "Running")]
    Running,
    #[sea_orm(string_value = "Completed")]
    #[serde(rename = "Completed")]
    Completed,
    #[sea_orm(string_value = "Failed")]
    #[serde(rename = "Failed")]
    Failed,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "history")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub description: Option<String>,
    pub kind: ExecutionKind,
    pub is_dry_run: bool,
    pub reference: Uuid,
    #[sea_orm(string_value = "type")]
    #[serde(rename = "type")]
    pub history_type: ExecutionType,
    pub status: ExecutionStatus,

    pub args: Option<serde_json::Value>,
    pub triggered_by: Option<i32>,
    pub triggered_on: chrono::NaiveDateTime
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    // #[sea_orm(
    // belongs_to = "super::datatable::Entity",
    // from = "Column::TableId",
    // to = "super::datatable::Column::Id"
    // )]
    // Table,
}

// impl Related<super::datatable::Entity> for Entity {
//     fn to() -> RelationDef {
//         Relation::Table.def()
//     }
// }

impl ActiveModelBehavior for ActiveModel {}
