//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use serde::{Deserialize, Serialize};


#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(15))", enum_name = "table_kind")]
pub enum ActionDataKind {
    #[sea_orm(string_value = "String")]
    String,
    #[sea_orm(string_value = "Int")]
    Int,
    #[sea_orm(string_value = "Bool")]
    Bool
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "field")]
pub struct Model {
    #[serde(skip_deserializing)]
    #[sea_orm(primary_key)]
    pub id: Uuid,
    pub name: String,
    pub kind: ActionDataKind,
    pub option: Option<String>,
    #[serde(skip_deserializing)]
    pub table_id: Uuid
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    // #[sea_orm(has_many = "super::action::Entity")]
    // Action,
    #[sea_orm(
        belongs_to = "super::datatable::Entity",
        from = "Column::TableId",
        to = "super::datatable::Column::Id"
    )]
    Table,
}

impl Related<super::datatable::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Table.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
